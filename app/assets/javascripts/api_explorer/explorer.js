// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var setValuesFromRequest, updateShareds;
    $(".hidden").hide().removeClass("hidden");
    window.responses = {};
    $(".shared-input.header").change(function() {
      return updateShareds();
    });
    updateShareds = function() {
      return $(".shared-input.header").each(function() {
        var name;
        name = $(this).attr("data-name");
        return $(".shared.header[data-name=" + name + "]").val($(this).val());
      });
    };
    setValuesFromRequest = function(request) {
      $("[data-source-request='" + request + "']").each(function(input) {
        var v;
        v = eval("responses['" + request + "']" + $(this).attr("data-source-accessor"));
        return $(this).val(v);
      });
      return updateShareds();
    };
    $(".param input").prop("disabled", false);
    $(".send-toggle").click(function(event) {
      var param, send, setState;
      event.preventDefault();
      setState = function(elements, state) {
        return elements.each(function(i, el) {
          $(el).attr("data-send", state ? "true" : "false");
          $(el).find("input").first().prop("disabled", !state);
          $(el).find(".send-toggle").first().text(state ? "don't send" : "send");
          return $(el).find(".name").first().toggleClass("strikethrough", !state);
        });
      };
      param = $(this).closest(".param");
      send = param.attr("data-send") !== "true";
      setState(param.add(param.find(".param")), send);
      if (send) {
        return setState(param.parents(".param"), true);
      }
    });
    return $("form").submit(function(event) {
      var form, path, req;
      event.preventDefault();
      form = $(this);
      req = form.serializeObject().request;
      form.closest(".request").find(".status").html("Requesting...");
      path = req.path;
      if (req.url_params) {
        $.each(req.url_params, function(p, v) {
          return path = path.replace(":" + p, v);
        });
      }
      return $.ajax({
        url: path,
        type: req.method,
        headers: req.headers,
        data: req.params,
        dataType: 'json'
      }).always(function(data, status, error) {
        var code, key;
        if (status === 'success') {
          code = 200;
          key = req.method.toUpperCase() + ":" + req.path.replace(api_explorer_base_url, "");
          window.responses[key] = data;
          setValuesFromRequest(key);
        } else {
          code = data.status;
          try {
            data = $.parseJSON(data.responseText);
          } catch (SyntaxError) {

          }
        }
        if (code === 0) {
          form.closest(".request").find(".status").text("Can't reach server");
          return form.closest(".request").find(".response").hide();
        } else {
          form.closest(".request").find(".status").text(code);
          return form.closest(".request").find(".response").text(JSON.stringify(data, null, 4)).show();
        }
      });
    });
  });

}).call(this);
